using EmuDev.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmuDev.Chip8
{
    public class Chip8Bus : IBus<ushort>
    {
        private byte[] Ram { get; }

        private byte[] Fonts { get; } = new byte[]
        {
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	        0x20, 0x60, 0x20, 0x20, 0x70, // 1
	        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
        };

        public ushort DataLength { get; internal set; }

        public Chip8Bus(byte[] rom)
        {
            Ram = new byte[4096];
            Fonts.CopyTo(Ram, 0x50);
            rom.CopyTo(Ram, 0x200);
            DataLength = (ushort)rom.Length;
        }

        public byte ReadByte(ushort addr)
        {
            return Ram[addr & 0x0FFF];
        }

        public void WriteByte(ushort addr, byte value)
        {
            Ram[addr & 0x0FFF] = value;
        }
    }
}
